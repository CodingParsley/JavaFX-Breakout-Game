package application;
import audio.AudioPlayer;
import gameComponents.Ball;
import gameComponents.Button;
import gameComponents.GameBoardModel;
import gameComponents.GameBoardView;
import gameComponents.StartScreenView;
import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.util.Duration;

public class TheController extends Application {
	private Stage window;
	private static int BOARD_WIDTH;
	private static int BOARD_HEIGHT;

	TheController(int width, int height) {
		BOARD_WIDTH = width;
		BOARD_HEIGHT = height;
	}

	@Override
	public void start(Stage primaryStage) throws Exception {
		window = primaryStage;
		window.setResizable(false);
		window.setTitle("Breakout");
		window.setWidth(BOARD_WIDTH);
		window.setHeight(BOARD_HEIGHT);
		goToStartScreen();
	}

	public void goToLevelScreen() {
		LevelsScreenModel theModel = new LevelsScreenModel(4, 4, 20);
		LevelsScreenView theView = new LevelsScreenView(theModel);
		theView.drawArrayOfButtons();
		int rcount = 0;

		for(Rectangle r: theView.getButtons()){
			rcount++;
			r.setOnMouseClicked(e->{
				int bcount = 0;
				for(Button button: theView.getDataButtons()){
					bcount++;
					button.getDoesSomething().run();
				}
				goToPlayScreen(theView.getLsm().getSelectedLevelNum());
			});
		}
		try {
			theView.start(window);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void goToPlayScreen(int levelNum) {
		Levels levels = new Levels();
		GameBoardModel gbm=levels.findLevel(levelNum);
		GameBoardView gameView=new GameBoardView(new MovePaddleLeft(gbm),
		new MovePaddleRight(gbm));
			try {
				gameView.start(window);
			} catch (Exception e1) {
				e1.printStackTrace();
			}
			Timeline timeline = new Timeline(new KeyFrame(Duration.millis(8), ae -> updateScreen(gameView, gbm)));
			timeline.setCycleCount(Animation.INDEFINITE);
			timeline.play();
			window.show();
	}

	public void goToStartScreen() throws Exception {
		StartScreenView theView = new StartScreenView();
		theView.getPlay().setOnAction(e->{goToLevelScreen();});
		theView.start(window);
		window.show();

		// Play Background Music
		AudioPlayer.playSoundEffectIndefinitely(AudioPlayer.gameMusicFile);
		// Play Background Music end
	}

	// Method for redrawing bat and balls
	public void updateScreen(GameBoardView theView, GameBoardModel theModel) {
		// Temporary solution
		if (window.getScene() == theView.getScene()) {
			theView.drawRectangle(theModel.getBat());
			for(Ball ball: theModel.getBalls()){
			theView.drawRectangle(ball);
			}
			for (gameComponents.Brick brick : theModel.getBricks()) {
				theView.drawRectangle(brick);
			}
			theModel.updateAll();
		} else {
			try {
				theView.stop();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

	}
	// Method for redrawing bat and balls end

	// Connects Data Paddle Movement with view paddle movement
	class MovePaddleLeft implements Runnable {
		GameBoardModel theModel;

		MovePaddleLeft(GameBoardModel theModel) {
			this.theModel = theModel;
		}

		@Override
		public void run() {
			theModel.movePaddleLeft();
		}
	}

	class MovePaddleRight implements Runnable {

		GameBoardModel theModel;

		MovePaddleRight(GameBoardModel theModel) {
			this.theModel = theModel;
		}

		@Override
		public void run() {
			theModel.movePaddleRight();
		}
	}
	// Paddle movement end

	public static int getBoardWidth() {
		return BOARD_WIDTH;
	}

	public static int getBoardHeight() {
		return BOARD_HEIGHT;
	}
}
