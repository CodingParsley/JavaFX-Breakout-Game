package application;

public class LineSegment {

	// Given three colinear Coordinates p, q, r, the function checks if
	// Coordinate q lies on line segment 'pr'
	boolean intersectss(float p0_x, float p0_y, float p1_x, float p1_y,
		    float p2_x, float p2_y, float p3_x, float p3_y, float *i_x, float *i_y)
		{
		    float s1_x, s1_y, s2_x, s2_y;
		    s1_x = p1_x - p0_x;     s1_y = p1_y - p0_y;
		    s2_x = p3_x - p2_x;     s2_y = p3_y - p2_y;

		    float s, t;
		    s = (-s1_y * (p0_x - p2_x) + s1_x * (p0_y - p2_y)) / (-s2_x * s1_y + s1_x * s2_y);
		    t = ( s2_x * (p0_y - p2_y) - s2_y * (p0_x - p2_x)) / (-s2_x * s1_y + s1_x * s2_y);

		    if (s >= 0 && s <= 1 && t >= 0 && t <= 1)
		    {
		        // Collision detected
		        if (i_x != NULL)
		            *i_x = p0_x + (t * s1_x);
		        if (i_y != NULL)
		            *i_y = p0_y + (t * s1_y);
		        return 1;
		    }

		    return 0; // No collision
		}








	private boolean onSegment(Coordinate p, Coordinate q, Coordinate r) {
		if (q.getX() <= Math.max(p.getX(), r.getX()) && q.getX() >= Math.min(p.getX(), r.getX())
				&& q.getY() <= Math.max(p.getY(), r.getY()) && q.getY() >= Math.min(p.getY(), r.getY()))
			return true;

		return false;
	}

	// To find orientation of ordered triplet (p, q, r).
	// The function returns following values
	// 0 --> p, q and r are colinear
	// 1 --> Clockwise
	// 2 --> Counterclockwise
	private double orientation(Coordinate p, Coordinate q, Coordinate r) {
		double val = (q.getY() - p.getY()) * (r.getX() - q.getX()) - (q.getX() - p.getX()) * (r.getY() - q.getY());

		if (val == 0)
			return 0; // colinear

		return (val > 0) ? 1 : 2; // clock or counterclock wise
	}

	// The main function that returns true if line segment 'aq1'
	// and 'bq2' intersect.
	public boolean intersects(LineSegment other) {
		// Find the four orientations needed for general and
		// special cases
		double o1 = orientation(a, other.a, b);
		double o2 = orientation(a, other.a, other.b);
		double o3 = orientation(b, other.b, a);
		double o4 = orientation(a, other.b, other.a);

		// General case
		if (o1 != o2 && o3 != o4)
			return true;

		// Special Cases
		// a, q1 and b are colinear and b lies on segment aq1
		if (o1 == 0 && onSegment(a, b, other.a))
			return true;

		// a, q1 and b are colinear and q2 lies on segment aq1
		if (o2 == 0 && onSegment(a, other.b, other.a))
			return true;

		// b, q2 and a are colinear and a lies on segment bq2
		if (o3 == 0 && onSegment(b, a, other.b))
			return true;

		// b, q2 and q1 are colinear and q1 lies on segment bq2
		if (o4 == 0 && onSegment(b, other.a, other.b))
			return true;

		return false; // Doesn't fall in any of the above cases
	}

	private Coordinate a;
	private Coordinate b;

	public Coordinate getA() {
		return a;
	}

	public Coordinate getB() {
		return b;
	}

	public LineSegment(Coordinate a, Coordinate b) {
		this.a = a;
		this.b = b;
	}

}
