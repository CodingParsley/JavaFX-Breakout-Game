package application;

import java.util.LinkedList;
import java.util.Optional;

public class BoardModel {
	private boolean canUseBat =  true;
	private final double LEFT_ANGLE_LIMIT = -35;
	private final double RIGHT_ANGLE_LIMIT = -150;
	private int gameScore = 0;
	public static int WIDTH;
	public static int HEIGHT;
	private final int BAT_WIDTH = 100;
	private final int BAT_HEIGHT = 15;
	private final int BAT_SPEED = 15;
	private double BALL_SPEED = 2;
	private int gapAboveBricks;
	private int brickRowHeight; // The height of a row of bricks, gap is not
								// included
	private int brickHeight; // Similar to brickRowHeight but gap is included
	private int brickGapH; // The gap that will separate the bricks horizontally
	private int brickGapV; // The gap that will separate the bricks vertically
	private int brickColumns; // The number of columns of bricks
	private int brickRows; // The number of rows of bricks
	private int columnWidth;
	private int brickWidth;
	private Rectangle windowRectangle;
	private Rectangle bat;
	private Ball ball;
	private LinkedList<Rectangle> bricks = new LinkedList<Rectangle>();
	private LinkedList<Rectangle> destroyedBricks = new LinkedList<Rectangle>();
	private ICollisionDetector detector;

	public BoardModel(int width, int height, int brickRowHeight, int brickGapH, int brickGapV, int gapAboveBricks,
			int brickColumns, int brickRows, ICollisionDetector detector) {
		WIDTH = width;
		HEIGHT = height;
		this.detector = detector;
		this.windowRectangle = new Rectangle(new Coordinate(0, 0), WIDTH, HEIGHT, RectangleType.Window);
		this.brickColumns = brickColumns;
		this.brickRows = brickRows;
		this.brickRowHeight = brickRowHeight;
		this.brickGapH = brickGapH;
		this.brickGapV = brickGapV;
		this.gapAboveBricks = gapAboveBricks;
		this.columnWidth = WIDTH / brickColumns;
		this.brickWidth = columnWidth - brickGapH;
		this.brickHeight = brickRowHeight - brickGapV;
		// Brick creation algorithm
		for (int column = 0; column < brickColumns; column++) {
			for (int row = 0; row < brickRows; row++) {
				Rectangle r = new Rectangle(new Coordinate((column * columnWidth) + (brickGapH / 2),
						(row * brickRowHeight) + gapAboveBricks), brickWidth, brickHeight, RectangleType.Brick);
				bricks.add(r);
			}
		}
		// Brick creation algorithm end
		Coordinate batUL = new Coordinate((WIDTH - BAT_WIDTH) / 2, (HEIGHT - BAT_HEIGHT));
		bat = new Rectangle(batUL, BAT_WIDTH, BAT_HEIGHT, RectangleType.Bat);
		ball = new Ball(new Coordinate(WIDTH / 2, HEIGHT / 2), 15, 15, BALL_SPEED, Math.toRadians(75),
				RectangleType.Ball);
	}

	public void movePaddleLeft() {
		if ((bat.getTopLeftCoordinate().getX() - BAT_SPEED) >= 0) {
			bat = bat.createMove(-BAT_SPEED, 0, bat.getType());
		}
	}

	public void movePaddleRight() {
		if (bat.getBottomRightCoordinate().getX() + BAT_SPEED <= WIDTH) {
			bat = bat.createMove(BAT_SPEED, 0, bat.getType());
		}
	}

	public void updateBricks() {
		for (Rectangle b : destroyedBricks) {
			b.setOpacity(0);
			b.setAlive(false);
		}
	}

	public void updateBall() {
		Ball nextBall = ball.getMove();
		LineSegment ballPathCenter = new LineSegment(ball.getCenterCoordinate(), ball.getMove().getCenterCoordinate());
		LineSegment ballPathTopLeft = new LineSegment(ball.getTopLeftCoordinate(), ball.getMove().getTopLeftCoordinate());
		LineSegment ballPathBottomRight = new LineSegment(ball.getBottomRightCoordinate(), ball.getMove().getBottomRightCoordinate());
		LineSegment ballPathTopRight = new LineSegment(ball.getTopRightCoordinate(), ball.getMove().getBottomRightCoordinate());
		LineSegment ballPathBottomLeft= new LineSegment(ball.getBottomLeftCoordinate(), ball.getMove().getBottomLeftCoordinate());

		boolean hitBat = false;
		boolean shouldFlipX = detector.intersects(ballPathCenter, windowRectangle.getLeftLineSegment())
				|| detector.intersects(ballPathCenter, windowRectangle.getRightLineSegment());
		boolean shouldFlipY = detector.intersects(ballPathCenter, windowRectangle.getTopLineSegment())
				//|| detector.intersects(ballPath, windowRectangle.getBottomLineSegment())
						;
		Optional<Double> r = bricks.stream().map(i -> i.getBottomRightCoordinate().getY()).max(Double::compare);
		// Variables that will let the ball know what new object to be


		//If Ball made a collision with the bat, then the bat will not be able to
		//cause collision untill ball is above bat's topLeftY coordinate
		// Bat collision detection
		if(shouldFlipX==false && shouldFlipY==false &&
		detector.basicIntersects(ball, bat) && canUseBat==true && ball.getTopLeftCoordinate().getY()>=bat.getTopLeftCoordinate().getY()){
			shouldFlipX=true;
			shouldFlipY=true;
			hitBat=true;
			canUseBat = false;
			System.out.println("Hit!!!!!!");
		}
		else if (shouldFlipX == false && shouldFlipY == false && detector.intersects(ballPathBottomRight, bat.getTopLineSegment()) &&canUseBat==true){
			shouldFlipY = true;
			hitBat = true;
			canUseBat = false;
			System.out.println("Hit");
		}
		// Bat collision detection end

		// Brick collision detection
		else if (shouldFlipX == false && shouldFlipY == false && r.get() >= ball.getTopLeftCoordinate().getY()) {
			for (Rectangle brick : bricks) {
				if (brick.isAlive()) {
					if (detector.intersects(ballPathTopLeft, brick.getBottomLineSegment())
							|| detector.intersects(ballPathBottomRight, brick.getBottomLineSegment())
							|| detector.intersects(ballPathTopRight, brick.getBottomLineSegment())
							|| detector.intersects(ballPathBottomLeft, brick.getBottomLineSegment())
							|| detector.intersects(ballPathTopLeft, brick.getTopLineSegment())
							|| detector.intersects(ballPathBottomRight, brick.getTopLineSegment())
							|| detector.intersects(ballPathTopRight, brick.getTopLineSegment())
							|| detector.intersects(ballPathBottomLeft, brick.getTopLineSegment())) {
						shouldFlipY = true;
					}
					if (detector.intersects(ballPathTopLeft, brick.getRightLineSegment())
							|| detector.intersects(ballPathBottomRight, brick.getRightLineSegment())
							|| detector.intersects(ballPathTopRight, brick.getRightLineSegment())
							|| detector.intersects(ballPathBottomLeft, brick.getRightLineSegment())
							|| detector.intersects(ballPathTopLeft, brick.getLeftLineSegment())
							|| detector.intersects(ballPathBottomRight, brick.getLeftLineSegment())
							|| detector.intersects(ballPathTopRight, brick.getLeftLineSegment())
							|| detector.intersects(ballPathBottomLeft, brick.getLeftLineSegment())) {
						shouldFlipX = true;
					}
					if (shouldFlipY == true || shouldFlipX == true) {
						destroyedBricks.add(brick);
						break;
					}
				}
			}
		}
		// Brick collision detection end

		// Calculating ball's new position
		if (shouldFlipX == false && shouldFlipY == false) {
			ball = nextBall;
		} else if (shouldFlipX == true && shouldFlipY == true) {
			ball = ball.flipXDirection().flipYDirection();
		} else if (shouldFlipX == true && shouldFlipY == false) {
			ball = ball.flipXDirection();
		} else if (shouldFlipX == false && shouldFlipY == true && hitBat == true) {
			// Angle limit is between -160 and +160
			// For every 1% offset, the ball should move 1 degree
			ball = ball.flipYDirection().changeAngleDegrees(ball.calculatePercentageOffsetWith(bat));

			if (ball.getAngleInDegrees() > LEFT_ANGLE_LIMIT) {
				//System.out.println("Before: " + ball.getAngleInDegrees());
				ball = ball.setAngleInDegrees(LEFT_ANGLE_LIMIT);
				//System.out.println("After: " + ball.getAngleInDegrees());
				System.out.println();
			}
			if (ball.getAngleInDegrees() < RIGHT_ANGLE_LIMIT) {
				System.out.println("Before: " + ball.getAngleInDegrees());
				ball = ball.setAngleInDegrees(RIGHT_ANGLE_LIMIT);
				System.out.println("After: " + ball.getAngleInDegrees());
				System.out.println();
			}

		} else if (shouldFlipX == false && shouldFlipY == true) {
			ball = ball.flipYDirection();
		}
		if(ball.getBottomLeftCoordinate().getY()<bat.getTopLeftCoordinate().getY()){
			canUseBat = true;
		}

		// Gameover check
		if (brickColumns * brickRows == destroyedBricks.size()) {
			gameScore += 1;
		}
	}

	public void updateAll() {
		// double oldBallX = ball.getCenterCoordinate().getX();
		updateBall();
		updateBricks();
		//bat = bat.createMove(-0.11, 0, bat.getType());
		// bat.getType());
	}

	public Rectangle getBat() {
		return bat;
	}

	public Rectangle getBall() {
		return ball;
	}

	public int getWidth() {
		return WIDTH;
	}

	public int getHeight() {
		return HEIGHT;
	}

	public int getGameScore() {
		return gameScore;
	}

	public LinkedList<Rectangle> getBricks() {
		return new LinkedList<Rectangle>(this.bricks);
	}

}
