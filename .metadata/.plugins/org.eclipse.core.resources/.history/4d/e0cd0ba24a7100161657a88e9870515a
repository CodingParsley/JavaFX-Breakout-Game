package application;

import audio.AudioPlayer;
import gameComponents.Ball;
import gameComponents.Button;
import gameComponents.GameBoardModel;
import gameComponents.GameBoardView;
import gameComponents.Packet;
import gameComponents.StartScreenView;
import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.util.Duration;

public class TheController extends Application {
	private Stage window;
	private static int BOARD_WIDTH;
	private static int BOARD_HEIGHT;
	Timeline timeline;

	TheController(int width, int height) {
		BOARD_WIDTH = width;
		BOARD_HEIGHT = height;
	}

	@Override
	public void start(Stage primaryStage) throws Exception {
		window = primaryStage;
		window.setResizable(false);
		window.setTitle("Breakout");
		window.setWidth(BOARD_WIDTH);
		window.setHeight(BOARD_HEIGHT);
		goToStartScreen();
	}

	public void goToLevelScreen() {
		LevelsScreenModel theModel = new LevelsScreenModel(2, 2, 40);
		LevelsScreenView theView = new LevelsScreenView(theModel);
		theView.drawArrayOfButtons();
		int rectangleIterationCount = 0;

		for (Rectangle r : theView.getGUIButtons()) {
			rectangleIterationCount++;
			final int finalRectangleIterationCount = rectangleIterationCount;
			r.setOnMouseClicked(e -> {
				int buttonIterationCount = 0;
				for (Button button : theView.getDataButtons()) {
					buttonIterationCount++;
					if (buttonIterationCount == finalRectangleIterationCount) {
						button.getDoesSomething().run();
						break;
					}
				}
				goToPlayScreen(theView.getLsm().getSelectedLevelNum());
			});
		}
		try {
			theView.start(window);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void goToPlayScreen(int levelNum) {
		int desiredFPS = 120;
		Levels levels = new Levels();
		GameBoardModel gbm = levels.findLevel(levelNum);
		GameBoardView gameView = new GameBoardView(new MovePaddleLeft(gbm), new MovePaddleRight(gbm),gbm, gbm.getExplosionRadius());
		gbm.newTranslateX.bind(gameView.newTranslateX);
		try {
			gameView.start(window);
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		timeline = new Timeline(new KeyFrame(Duration.millis(1000 / desiredFPS), ae -> {
			updateScreen(gameView, gbm);
		}));
		timeline.setCycleCount(Animation.INDEFINITE);
		timeline.play();
		window.show();
	}

	public void goToStartScreen() throws Exception {
		StartScreenView theView = new StartScreenView();
		theView.getPlay().setOnAction(e -> {
			goToLevelScreen();
		});
		theView.start(window);
		window.show();

		// Play Background Music
		AudioPlayer.playSoundEffectIndefinitely(AudioPlayer.gameMusicFile);
		// Play Background Music end
	}

	// Method for redrawing bat and balls
	public void updateScreen(GameBoardView theView, GameBoardModel theModel) {
		// Temporary solution
		if (window.getScene() == theView.getScene()) {
			theView.drawRectangle(theModel.getBat());

			for (Ball ball : theModel.getBalls()) {
				theView.drawRectangle(ball);
			}
			for (Packet packet : theModel.getPackets()) {
				theView.drawRectangle(packet);
			}
			for (gameComponents.Brick brick : theModel.getBricks()) {
				theView.drawRectangle(brick);
			}

			for (gameComponents.Rectangle rectangle : theModel.getPhotonBullets()) {
				theView.drawRectangle(rectangle);
			}
			if (theModel.getPhotonBlasters()!=null) {
				theView.drawRectangle(theModel.getPhotonBlasters().getLeftBlaster());
				theView.drawRectangle(theModel.getPhotonBlasters().getRightBlaster());
			}
			// if(theModel.getRectangleOfDestruction()!=null){
			// theView.drawRectangle(theModel.getRectangleOfDestruction());
			// }

			theModel.updateAll();
		} else {
			try {
				theView.stop();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

	}
	// Method for redrawing bat and balls end

	// Connects Data Paddle Movement with view paddle movement
	class MovePaddleLeft implements Runnable {
		GameBoardModel theModel;

		MovePaddleLeft(GameBoardModel theModel) {
			this.theModel = theModel;
		}

		@Override
		public void run() {
			theModel.movePaddleLeft();
		}
	}

	class MovePaddleRight implements Runnable {

		GameBoardModel theModel;

		MovePaddleRight(GameBoardModel theModel) {
			this.theModel = theModel;
		}

		@Override
		public void run() {
			theModel.movePaddleRight();
		}
	}
	// Paddle movement end

	public static int getBoardWidth() {
		return BOARD_WIDTH;
	}

	public static int getBoardHeight() {
		return BOARD_HEIGHT;
	}
}
