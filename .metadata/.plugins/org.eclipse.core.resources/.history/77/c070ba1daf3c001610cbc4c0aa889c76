package application;

public class LineSegment {

    int x;
    int y;

// Given three colinear Coordinates p, q, r, the function checks if
// Coordinate q lies on line segment 'pr'
boolean onSegment(Coordinate p, Coordinate q, Coordinate r)
{
    if (q.getX() <= Math.max(p.getX(), r.getX()) && q.getX() >= Math.min(p.getX(), r.getX()) &&
        q.getY() <= Math.max(p.getY(), r.getY()) && q.getY()>= min(p.getY(), r.getY()))
       return true;

    return false;
}

// To find orientation of ordered triplet (p, q, r).
// The function returns following values
// 0 --> p, q and r are colinear
// 1 --> Clockwise
// 2 --> Counterclockwise
double orientation(Coordinate p, Coordinate q, Coordinate r)
{
    // See http://www.geeksforgeeks.org/orientation-3-ordered-Coordinates/
    // for details of below formula.
    double val = (q.getY() - p.getY()) * (r.getX() - q.getX()) -
              (q.getX() - p.getX()) * (r.getY() - q.getY());

    if (val == 0) return 0;  // colinear

    return (val > 0)? 1: 2; // clock or counterclock wise
}

// The main function that returns true if line segment 'p1q1'
// and 'p2q2' intersect.
boolean doIntersect(Coordinate p1, Coordinate q1, Coordinate p2, Coordinate q2)
{
    // Find the four orientations needed for general and
    // special cases
    int o1 = orientation(p1, q1, p2);
    int o2 = orientation(p1, q1, q2);
    int o3 = orientation(p2, q2, p1);
    int o4 = orientation(p2, q2, q1);

    // General case
    if (o1 != o2 && o3 != o4)
        return true;

    // Special Cases
    // p1, q1 and p2 are colinear and p2 lies on segment p1q1
    if (o1 == 0 && onSegment(p1, p2, q1)) return true;

    // p1, q1 and p2 are colinear and q2 lies on segment p1q1
    if (o2 == 0 && onSegment(p1, q2, q1)) return true;

    // p2, q2 and p1 are colinear and p1 lies on segment p2q2
    if (o3 == 0 && onSegment(p2, p1, q2)) return true;

     // p2, q2 and q1 are colinear and q1 lies on segment p2q2
    if (o4 == 0 && onSegment(p2, q1, q2)) return true;

    return false; // Doesn't fall in any of the above cases
}


	private Coordinate a;
	private Coordinate b;

	public Coordinate getA() {
		return a;
	}

	public Coordinate getB() {
		return b;
	}

	public LineSegment(Coordinate a, Coordinate b){
		this.a = a;
		this.b = b;
	}
	private double calculateSlope(){
		double numerator = b.getY()-a.getY(); // Slope formula is y2-y1/x2-x1
		double denomenator = b.getX()-a.getX();
		return (numerator/denomenator);
	}
	public boolean intersects(LineSegment other){
		if (this.calculateSlope()==other.calculateSlope()){

		}
	}
}
